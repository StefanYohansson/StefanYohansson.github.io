<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PureBeauty</title>
    <description>minimalistic, sexy, beautiful (jekyll) theme.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 21 Jul 2017 11:44:11 -0300</pubDate>
    <lastBuildDate>Fri, 21 Jul 2017 11:44:11 -0300</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>Why so complicated javascript?</title>
        <description>&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;Javascript is a language changing a lot over time. Recently, a wave of tools show up in a scenario where always all you needed to do was include some files and use it.&lt;/p&gt;

&lt;p&gt;If you already know these tools and what they are used for, you probably don’t need to read this post. I’m not listing all pros and cons for every new tool, but I’ll try to justify why we need it.&lt;/p&gt;

&lt;h2 id=&quot;so-why-change-this-simple-workflow&quot;&gt;So why change this simple workflow?&lt;/h2&gt;

&lt;p&gt;Because javascript evolved from build simple DOM manipulations on a website to build complex applications. This new use case for the language requested a lot from the syntax and project organization.&lt;/p&gt;

&lt;p&gt;Thinking this way, people start to use an approach used for all languages. Start from an entry point and let the program decide what will be used and what not.&lt;/p&gt;

&lt;p&gt;A decade ago we have a lot of programs wrote this way:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- html slice --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lib1.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lib2.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js slice&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Lib1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is: all the libraries are imported on the global website/application. It’ll easily expose your architecture and it could generate a lot of variable/object override.&lt;/p&gt;

&lt;p&gt;Using application mindset:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- html slice --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js slice&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Lib1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lib1.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Lib1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;so what we got now? &lt;strong&gt;Bundles&lt;/strong&gt;. These bundles are built reading an entry point (app.js for previous example) and including on the bundle only javascript pieces &lt;strong&gt;imported&lt;/strong&gt; and &lt;strong&gt;used&lt;/strong&gt;. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; we can include only the modules we want on current file scope (vendors or local files).&lt;/p&gt;

&lt;h3 id=&quot;npm&quot;&gt;NPM&lt;/h3&gt;

&lt;p&gt;npm is a dependency manager for javascript. Recently it isn’t the unique, but it’s the “default” when you install node. So why I need npm? because it’ll handle all the vendor libraries for you. “In the old times”, we used to copy and paste all vendors/third parties on our code tree, but projects/libraries start to use lot of libraries and today if we follow what we always did, we will finish the project with tons of duplicated dependencies of dependencies on our final bundle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem: bundle size that implies on final performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;webpack&quot;&gt;Webpack&lt;/h3&gt;

&lt;p&gt;Webpack is used for generate the bundle, but not to parse/transpile the new syntax. It’ll match file types based on your configuration and pipe the matching files to plugins, these plugins will parse and extract to outputs (&lt;strong&gt;bundles&lt;/strong&gt;) defined in webpack config.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem: include and use only what is necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;babel&quot;&gt;Babel&lt;/h3&gt;

&lt;p&gt;Babel will parse and transpile the new javascript syntax. Without any loader/config babel only receive code and return the same code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code -&amp;gt; code
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;but you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;stage-n&lt;/code&gt; (&lt;em&gt;n&lt;/em&gt; can be 3, 2, 1, 0) loader or any other plugin and it’ll recognize supported syntax for this loader and transpile to “old javascript” for compatibility with browsers that doesn’t support what you want.&lt;/p&gt;

&lt;p&gt;Now, you can use the new syntax that enables to you write less code and do more.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;saveForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// save logic&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Without the object check &lt;code class=&quot;highlighter-rouge&quot;&gt;ìf (object &amp;amp;&amp;amp;&lt;/code&gt;, you can pass an &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; by mistake and receives an &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError: object is undefined&lt;/code&gt;. This function can be replaced by:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;saveForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’ll assign specified object keys to a local variables, plus do all the validations. Neat right?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem: Old javascript can be improved to prevent basic mistakes, so why not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;more-easy&quot;&gt;More easy&lt;/h3&gt;

&lt;p&gt;But all this complication can be resumed for the contributors and end users.&lt;/p&gt;

&lt;p&gt;This stack can be setup and started for development or production with 3 commands.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Start development server&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To start development server for contributors, here you can include more tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;hot reload&lt;/code&gt; to reload application on save, &lt;code class=&quot;highlighter-rouge&quot;&gt;browser sync&lt;/code&gt; to synchronize actions between browsers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build production artifacts&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To generate a folder with artifacts in order to serve it to end users. Generally, you just need to point your apache/nginx to this folder and open it.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jul 2017 00:00:00 -0300</pubDate>
        <link>/2017/07/21/why-so-complicated-js/</link>
        <guid isPermaLink="true">/2017/07/21/why-so-complicated-js/</guid>
        
        
      </item>
    
      <item>
        <title>Patch Inquisition</title>
        <description>&lt;p&gt;Há muito tempo a discussão do momento é sobre &lt;strong&gt;gerencia de software&lt;/strong&gt;
e como obter um software mais confiável. (robusto, escalável, eficiente, etc)&lt;/p&gt;

&lt;p&gt;Então certos profissionais da área tendem a optar por estratégias como SCRUM,
intrigantes quadros como o Kanban, duros procedimentos de revisão de código.&lt;/p&gt;

&lt;p&gt;No final das contas, o que acontece? O sistema eventualmente quebra. Porque?
Provavelmente porque alguém estava com dor de cabeça, brigou com alguém ou simplesmente
não prestou atenção na revisão.&lt;/p&gt;

&lt;p&gt;Nessa situação, só há uma coisa a fazer: &lt;strong&gt;Consertar o problema.&lt;/strong&gt;
Eventualmente, descobrir o que causou o problema, não necessariamente quem, afinal
relacionar um novo ticket com um antigo já vai fazer o desenvolvedor que submeteu o patch perceber
que fez merda.&lt;/p&gt;

&lt;p&gt;Recentemente, enviei uma correção para o developer tools do Firefox. Nessa correção,
eu acabei introduzindo um bug e fazendo com que outro escondido viesse à luz.
Ambos foram encontrados e corrigidos por mim, mesmo depois de afetar
alguns usuários.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Um tribunal da inquisição da Mozilla veio a minha casa me queimar vivo? &lt;strong&gt;Não&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Alguém foi na issue que eu tinha feito ou no IRC rir de mim por não ter visto ou testado todos os casos? &lt;strong&gt;Não&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Foi dito que houve x problemas e que nunca mais devem ocorrer no Weekly Call? &lt;strong&gt;Não&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Alguém se prontificou para resolver o problema? &lt;strong&gt;Sim&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então, quando encontrarmos um problema, resolvamos. Talvez depois, falemos com
quem o introduziu para encorajar a entender o que aconteceu e na próxima vez
que acontecer saber como resolver mais rápido, se preciso faça uma base de conhecimento.
(Não use o pensamento de que não deve nunca mais se repetir, pois eventualmente irá)&lt;/p&gt;

&lt;p&gt;E lembre-se:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Espere o pior, sempre. Li recentemente no quora um artigo interessante sobre &lt;strong&gt;problemas de um desenvolvedor&lt;/strong&gt; e um dos pontos dizia:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Excesso de confiança. Um desenvolvedor sabe que vai dar algum erro naquela lib introduzida para facilitar a sua vida.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Não se apegue a solução, foque na resolução do problema.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The moral of the story is to focus on the problem - not a specific solution
and to discuss it with the development community before investing in the
creation of a body of code.”
Kernel early stage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Não culpe ninguém pelo erro, corrija e defina um modo de evita-lo. (se houver)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://programming-motherfucker.com/&quot;&gt;Programming, Motherfucker&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 -0300</pubDate>
        <link>/2017/06/15/patch-inquisition/</link>
        <guid isPermaLink="true">/2017/06/15/patch-inquisition/</guid>
        
        
      </item>
    
      <item>
        <title>AMOR - Install themes on AMOR from package manager</title>
        <description>&lt;p&gt;Hi, (it’s a short one)&lt;/p&gt;

&lt;p&gt;Recently, I have created a theme for AMOR project, since I finish it I have found another way to install themes without compile it.&lt;/p&gt;

&lt;p&gt;We only need to put the theme on &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kde4/share/apps/amor&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://drive.google.com/drive/folders/0BwFhcg1_acLiWG9wQW8wQl9HSGc?usp=sharing&quot;&gt;Download theme here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/.kde4/share/apps/amor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv &amp;lt;where-you-downloaded-file.zip&amp;gt; .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unzip &amp;lt;file.zip&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;amor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Right-click on your current character &amp;gt; Configure &amp;gt; Choose installed theme&lt;/li&gt;
  &lt;li&gt;Apply&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All set, enjoy it!&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 00:00:00 -0300</pubDate>
        <link>/2017/04/13/amor-easy-install-hatsune-miku-theme/</link>
        <guid isPermaLink="true">/2017/04/13/amor-easy-install-hatsune-miku-theme/</guid>
        
        
      </item>
    
      <item>
        <title>AMOR - a desktop companion</title>
        <description>&lt;h1 id=&quot;read-this-if-you-want-the-easy-way&quot;&gt;&lt;a href=&quot;http://stefanyohansson.github.io/2017/04/13/amor-easy-install-hatsune-miku-theme/&quot;&gt;Read this, if you want the easy way.&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I am a crazy person, don’t judge me. Recently, a friend point me out to this software called AMOR. Just for curiosity, “Amor” in portuguese (my main language) means love. &lt;i class=&quot;em em-love_letter&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;So what the heck is this software? well, let’s explain by paste git description here: “&lt;strong&gt;A&lt;/strong&gt;musing &lt;strong&gt;M&lt;/strong&gt;isuse &lt;strong&gt;O&lt;/strong&gt;f &lt;strong&gt;R&lt;/strong&gt;esources animation that sits on top of the curent window”. Now you know that is a waste of resource, maybe you’d closed the tab, but if you don’t do it yet, here are some screenshot:&lt;/p&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;4O0rPqc&quot;&gt;&lt;a href=&quot;//imgur.com/4O0rPqc&quot;&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;iQfyRoD&quot;&gt;&lt;a href=&quot;//imgur.com/iQfyRoD&quot;&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;X9MUH1M&quot;&gt;&lt;a href=&quot;//imgur.com/X9MUH1M&quot;&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Yeah, it’s cute AND (^) damn it just take 6MiB from your computer.&lt;/p&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;RUI1UNO&quot;&gt;&lt;a href=&quot;//imgur.com/RUI1UNO&quot;&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;AMOR is an old software and only have themes from initial release, so I decide to add some themes for me (and some friends). From this initiative born the first theme: Hatsune Miku from Vocaloid Project (screenshots). Craft your theme is an easy task (I was thiking on something like a lot of xmls and pain) but it’s just cut some spritesheet (program use separate pngs), create actions with some sprites and define a scene sequence, so your companion will execute random action from sequence array every time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cgit.kde.org/amor.git&quot;&gt;Git repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;build instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git://anongit.kde.org/amor.git
$ cd amor
$ git apply &amp;lt;my-hatsune-patch-here&amp;gt;
$ mkdir build
$ cd build
$ cmake ..
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/StefanYohansson/7980c45feb015ba1193d3d2c3a99540e&quot;&gt;Working patch for Hatsune Miku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AMOR is available on package manager for Ubuntu, Arch and Debian (maybe others), but this way only allow you to use default themes, no Hatsune for you yet. I’m working on a fork to add import theme feature in runtime.&lt;/p&gt;

&lt;p&gt;That’s all folks.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 -0300</pubDate>
        <link>/2017/03/31/amor-a-desktop-companion/</link>
        <guid isPermaLink="true">/2017/03/31/amor-a-desktop-companion/</guid>
        
        
      </item>
    
      <item>
        <title>Google Drive for backup small databases</title>
        <description>&lt;h1 id=&quot;this-tutorial-is-for-unix-distros-but-you-can-adapt-to-your-needs&quot;&gt;This tutorial is for unix distros, but you can adapt to your needs.&lt;/h1&gt;

&lt;p&gt;Well, I need to backup a small client database and needed to do it fast and easy. So I think on the first thing that help me when I think on backup or send a file: Google Drive. Why not?&lt;/p&gt;

&lt;p&gt;Client OS is Debian 8.3 (jessie) and I have installed &lt;a href=&quot;https://github.com/prasmussen/gdrive&quot;&gt;gdrive project&lt;/a&gt; to manage upload. All you need to do is download a binary and install on your machine.&lt;/p&gt;

&lt;h2 id=&quot;configuring-gdrive&quot;&gt;Configuring gdrive&lt;/h2&gt;

&lt;p&gt;After install/copy binary, only thing left to do is run &lt;code class=&quot;highlighter-rouge&quot;&gt;gdrive about&lt;/code&gt; and follow program instruction to generate token.&lt;/p&gt;

&lt;h2 id=&quot;create-target-folder&quot;&gt;Create target folder&lt;/h2&gt;

&lt;p&gt;Now, we need to create a folder to upload our files to google drive, do it using &lt;code class=&quot;highlighter-rouge&quot;&gt;gdrive&lt;/code&gt; by command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;gdrive mkdir &amp;lt;folder&amp;gt;&lt;/code&gt; this way you will receive an output like this &lt;code class=&quot;highlighter-rouge&quot;&gt;Directory 0BwFhcg1_acLiemZENlQ5Z2Vpd2c created&lt;/code&gt;. Save that hash and go on.&lt;/p&gt;

&lt;h2 id=&quot;pg_dump-command&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2893954/how-to-pass-in-password-to-pg-dump&quot;&gt;pg_dump command&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I suppose that you know how to export a dump from your database and pg_dump is how I export from postgres. So let’s talk about it. For avoid pg_dump to ask password every time you’ll need to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pgpass&lt;/code&gt; file on home folder of the user that will execute your command, if you’ll put it in a cronjob, you can export a environment variable and export using &lt;code class=&quot;highlighter-rouge&quot;&gt;--dbname&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;using .pgpass:
create &lt;code class=&quot;highlighter-rouge&quot;&gt;.pgpass&lt;/code&gt; file, write &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:5432:mydbname:postgres:mypass&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600 .pgpass&lt;/code&gt;
then
&lt;code class=&quot;highlighter-rouge&quot;&gt;pg_dump &amp;gt; last_backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;using environment variable:
&lt;code class=&quot;highlighter-rouge&quot;&gt;export MYDB=postgresql://username:password@127.0.0.1:5432/mydatabase&lt;/code&gt;
then
&lt;code class=&quot;highlighter-rouge&quot;&gt;pg_dump --dbname=$MYDB &amp;gt; last_backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;concat-all-the-things&quot;&gt;concat all the things&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pg_dump --dbname=$MYDB &amp;gt; /root/last_backup.sql &amp;amp;&amp;amp; ts=$(eval date +&quot;%x_%T&quot;); gdrive upload -p 0BwFhcg1_acLiemZENlQ5Z2Vpd2c --name &quot;last_backup_${ts}&quot; /root/last_backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-explain-the-command&quot;&gt;let’s explain the command:&lt;/h3&gt;

&lt;p&gt;pg_dump for export database to file &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/last_backup.sql&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;ts variable with current date assigned;&lt;/p&gt;

&lt;p&gt;now on gdrive upload you’ll use that hash copied from gdrive mkdir command, –name argument is for name on google drive after upload, here we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ts&lt;/code&gt; variable to diff backup names, otherwise we’ll see only a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;last_backup&lt;/code&gt; files. You can create a script put this code and check integrity comparing previous dump size or something fancy.&lt;/p&gt;

&lt;p&gt;That’s all folks.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 -0300</pubDate>
        <link>/2017/03/15/gdrive-backup-small-databases/</link>
        <guid isPermaLink="true">/2017/03/15/gdrive-backup-small-databases/</guid>
        
        
      </item>
    
      <item>
        <title>PSVita buttons isn't working on applications</title>
        <description>&lt;h1 id=&quot;first-think-about-what-youre-doing-do-it-calm-and-focused-if-youve-warranty-just-send-it&quot;&gt;First, think about what you’re doing, do it calm and focused. If you’ve warranty just send it.&lt;/h1&gt;

&lt;p&gt;Recently, My Playstation Vita stop working as expected. I was searching all the internet for any way to fix what looks like a software (firmware) problem. Basically, square, circle, left buttons won’t work for any reason, BUT only in applications, if I hold ps button to open enable/disable wifi page everything works fine.&lt;/p&gt;

&lt;p&gt;First, I found this on EU PSN community:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://community.eu.playstation.com/t5/PS-Vita-Support/ps-vita-buttons-not-working/m-p/17605424&quot;&gt;PS Vita buttons not working (EU PSN Community)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It leads me to the first thing to do: go to safe mode and try every option there.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;turn off the psvita, so press power while holding the PS Button and the right shoulder button (Safe mode)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can’t help me in any way and now I was thinking in throw psv away when I found &lt;strong&gt;@mikmoe&lt;/strong&gt; first comment:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey guys I also came across this error with my vita buttons only working on the menu and not an actual game. Unlike most I refuse to pay 150$ to send it in and then wait a month to get a new one. So i took it apart and found the problem and its a easy and cheap fix. […]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read entire comment if you want to understand what he’s explaining.
This comment made me doubt my firmware tesis and I was thinking about something on hardware (it’s really odd, because the buttons is working outside apps.)&lt;/p&gt;

&lt;p&gt;In minutes I was watching this video:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=EWpeZVH1DXw&amp;amp;feature=youtu.be&quot;&gt;Sony Playstation Vita Self Repair Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a how to take apart your playstation vita. Now I can f*ck up my psvita myself. I bought a precision screwdriver and start disassembly it.&lt;/p&gt;

&lt;p&gt;If you’re reading this now and thinking: “ow, f*ck… I can’t do this.” there’s something you need to know: it’s REALLY easy. (remember, do it calm and focused, if you prefer write where every screw goes or take a photo of every step)&lt;/p&gt;

&lt;p&gt;All you need to do is follow the video until when he remove the left and right boards, there’s our problem (or should be), you don’t need to open entire thing. I just remove the left and right boards (after remove all the screws and flat cables) and clean up both connections using alcohol.&lt;/p&gt;

&lt;p&gt;Now you can mount it, go to safe mode, recreate database, wait a little, pray a little.&lt;/p&gt;

&lt;p&gt;My PS Vita come back to work flawlessly after that, I hope you can ressurect yours too.&lt;/p&gt;

&lt;p&gt;Special thanks to ps player @mikmoe.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Feb 2017 00:00:00 -0300</pubDate>
        <link>/2017/02/20/psvita-buttons-isnt-working-on-applications/</link>
        <guid isPermaLink="true">/2017/02/20/psvita-buttons-isnt-working-on-applications/</guid>
        
        
      </item>
    
      <item>
        <title>ProjectSH for lazy people</title>
        <description>&lt;h1 id=&quot;deprecated-im-using-z-project-instead-thanks-to-stavros&quot;&gt;&lt;strong&gt;[Deprecated] I’m using &lt;a href=&quot;https://github.com/rupa/z/&quot;&gt;z&lt;/a&gt; project instead. Thanks to &lt;a href=&quot;http://stavros.io/&quot;&gt;@stavros&lt;/a&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Have you ever need to change from one project to another? If you get yourself writing &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../../ [...]&lt;/code&gt; just to go somewhere else to execute one command or cat a file or something else, I know your pain.&lt;/p&gt;

&lt;p&gt;Recently, a friend point me to &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; project, an environment switcher for the shell, and things start make sense for me. When I go to a folder, direnv automagically execute a script to configure/initialize things, so I just need to start coding. Everything was beautiful until I start programming in projects using API + front-end as separated projects, now things start being annoying again.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;normal people: open one terminal, open two tabs, on first tab open things from project 1, maybe tiled on tmux maybe not, on second tab open things from project 2. Hard lift is just switch between tabs.
Think this way, you are on tab 1, writing things to your front-end project using vim, so you realize that a migration is missing on your API and need to go to another project. It will be nice if we have something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ goto project2

/* edit some things */
/* execute commands */

$ goto project1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or if you are lazy like me: Imagine that you just woke up and will start programming, when you open the terminal, need to &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your project folder.&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;Today, I write a solution for me (maybe only my problem). I just called &lt;a href=&quot;https://github.com/StefanYohansson/projectsh&quot;&gt;projectsh&lt;/a&gt;, it’s an easy jump between projects and it’s easy to use (at least for me).&lt;/p&gt;

&lt;p&gt;You just need to go into your project 1 folder and type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /where/is/project1
$ projectsh --add project1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;same for project2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /where/is/project2
$ projectsh --add project2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;now if you are on project1 or anywhere, you just need to run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ projectsh project2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and magically it will &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into project2 folder.
If you want to remove a project index, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ projectsh --remove project1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you are using direnv, it will be awesome, you will run projectsh to go into a folder and direnv auto load the environment (from .direnv file) for you. Now, it’s time to work without run thousands of commands everytime.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 00:00:00 -0300</pubDate>
        <link>/2016/12/23/projectsh-for-lazy-people/</link>
        <guid isPermaLink="true">/2016/12/23/projectsh-for-lazy-people/</guid>
        
        
      </item>
    
  </channel>
</rss>
